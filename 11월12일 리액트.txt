리액트
-------------------비구조화할당 ----------------------------------

객채나 배열을 값을 변수에 할당한다 >>>> 배열의형식을  { 키 : 값 }으로 할당한다
>>> 변수 의 배열을 입력하고 값을 변수로 할당한다
const kim = {a:1,b:2,c:3}

const {a,c} = kim
console.log (a,c)	//1 , 3 을각각 출력하는 방식

원래 키값을 호출하는방법은 인데
객체.키  or  객체["키명"]
const.a  or  const["a"] 

  const kim = { a: 1, b: 2, c: "문자" };
  const { a, b, c } = kim;	//키값이 반드시 같아야한다 그렇지않으면 출력되지않는다
  var elSpan = document.querySelectorAll("#result > span");

  elSpan[0].innerText = a;	//1
  elSpan[1].innerText = b;	//2
  elSpan[2].innerText = c;	//문자
식으로 출력하는 방법을 리액트식으로 간단하게 출력한방법이 비구조화 할당이다

-----------------리액트 컴포넌트 라이프 사이클 메서드 (생성과 파괴)---------------

리액트는 기본적으로 컴포넌트구조를 기반으로 한다

mounting(생성) , unmounting (파괴 : state를 통해 값이 변경됐거나, 페이지가 교체될떄)

리액트 컴포넌트 생성과정은 다음과같이 정의할수 있다
constructor( ) : 컴포넌트가 생성될때 가장 먼저 호출되는 함수  //로딩화면에 응용할수 있다
render ( ) : 컴포넌트 화면상에 랜더링을 해주는함수
componentDidMount( ) : 렌더 함수가 모두 실행이 완료되고 실행되는 함수 ( 처음 한번 렌더링 된후에만 함수 호출 )

constructor (props){   //컴포넌트 웹페이지가 열릴시 가장먼저 수행되는 함수
		
}

render() {
	//constructor (){} 함수가 실행되고 직접적으로 화면에 렌더링 되는함수
}

componentDidMount(){   //렌더 함수가 모두 실행이 완료되고 실행되는함수

}

컴포넌트의 유지보수 측면에서는 
compoentDidUpdate() :   setState( ) 함수가 실행되면 실행되는 함수가 있다

setState( )이벤트가 발생하거나 호출되면 compoentDidUpdate가 같이 호출된다

----------------------slice( )-----------------------------
const kim = "아름다운 나라"  
라는 변수가 있다면 " " 값안에 들어가는 값들은 전부 배열로 반환되기때문에 
console.log(kim[1])   //름 이출력이 된다

이때 slice( )를 사용한다면
console.log(kim.slice[0,3])	//아름다운 이 출력된다

------------------리액트 빌드 호스팅업로드----------------
터미널에서
cd ... 파일접근
yarn build 입력




